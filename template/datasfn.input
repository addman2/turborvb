&simulation
itestr4=-6        ! LRDMC option 
ngen=1000         ! Number of branching 
!nscra=500         !Recomputing by scratch determinant each nscra accepted moves
nw=64             ! Number of walkers (default nw=# processors). 
iseedr=536473883  ! Initial random number 
!nbra=100         ! if nbra>0 LRDMC with fixed number of accepted move for each                     branching. To improve load balancing between processors.
!disk_io='default' ! 'default' spits out one file per rank,                                  'nocont' spits nothing, 'mpiio' splits one file for all ranks.
/
&pseudo 
!nintpsa=6       ! 6 points integration pseudo default
!npsamax=1       ! max number of overlapping pseudo atoms cores defined                            in pseudo.dat (r< rcut) default 1(2) for atom(s)
/
&dmclrdmc
tbra=0.1d0    ! DMC time (H^{-1}) between consecutive branching 
etry=-5.42d0  ! Guess of the energy (H)
!Klrdmc=0.d0   ! eta =1.+Klrdmc  a^2   
alat=0.125d0   ! lattice space a  (negative alat  means randomize directions) necessary for continuous 
!gamma=0.d0    ! gamma in LRDMC, if positive use readf.x later to see the energy                 if negative use readqe.x later to sample the sign
!parcutg=1     ! Default is the right choice, parcutg=2 for cusp (all electrons), parcutg=1 all pseudo smooth 
!alat2=2.      ! Doblle mesh alat2=a'/a. alat2=0 do not use double mesh (slower but standard).  
!optbra=0     ! Various types of branching
!srpar=0.d0   ! SR parameter for improved nodes
!novar=0       ! Growth estimator = <H^a>, integrated energy = <H> mixed average
!epscutdmc=0  ! Cutoff in the Guiding function close to nodes. Non zero if                      release nodes are required.
! plat(1)= r_c ! Define it if you want to change the region r<rc where small lattice space is used, larger- more accurate- slower and viceversa
/        
&readio 
iread=0        !  use iread=6 for using readqe.x tool later
/
&parameters
!ieser=1         ! Energy 
!isfix=1         ! Variance 
!ieskin=0        ! Flag for calculation of forces
!scalepulay=1    ! If scalepulay<=0 the Pulay term is scaled by |scalepulay| in the warp=.true. case                              in a consistent way so as to be able to compute the HM contribution scalepulay=0, or the finite variance (maybe) contribution scalepulay=-0.5.                                                  NB use always 1 in the last input of forcefn.sh ( e.g. forcefn.sh 100 0 2 1). 
/


&simulation    

itestr4=-4   ! -4 standard,-8 use twice larger basis for the Hartree potential. 

iopt=1       ! = 1 initialize with no potential (no Hartree, xc, correlation).                  
             ! = 0 continue starting with wf read in fort.10_new and occupation read in occupationlevels.dat (both generated after iopt=1 run).
             !   NB: if nelocc (neloccdo) > 0  occupations are read from std input as explained below.
             ! = 2 the same as 0, but write main matrices matrices (basis set/Hamiltonian overlaps, charge/spin density) 
             !     if writescratch = 0 without reading them

compute_bands=.false. ! put this flag to .true. if you want to perform non self-consistent calculations for band structure. It must be 
                      ! performed after a self-consistent run with the same molecular orbital real-space mesh.
             
&end

&pseudo
!nintpsa=6           ! number of integration point for pseudo if present
!pseudorandom=.true. ! Use a random integration mesh for pseudo with the algorithm for QMC by R. Fahy.
!npsamax=2           ! Multiplication factor for the number of pseudo integration points.
                     ! NB: Use npsamax>2 if the code terminates with the error "Increase npsamax [...]".
/
&vmc
/
&optimization
molopt=1        ! Do not change this values, DFT only works with molecular orbitals.
/
&readio
!writescratch=1  ! = 0 write binary scratch files on disk to speed up continuation and allow non self-consistent calculations and
                 !     post-processing tools. Files written:
                 !     "tmp000xxx" = one for each processor. These files contain the basis/Hamiltonian overlaps matrix elements 
                 !                   in the first record. In the second record are contained the charge/spin densities distributed matrices.
                 !     "total_densities.sav" = single file. It contains the total, i.e. not distributed over the real space integration
                 !                             grid, charge density in the first record, and the total spin density in the second
                 !                             in the case of LSDA calculations.
                 !     "wavefunction.sav" = single file. It contains the final Kohn-Sham eigenvectors for all the bands. If k-points are
                 !                          present, each record contains the eigevectors o a single k-point in the order as they 
                 !                          appear in the "occupationlevels.dat" file.  
                     
                 ! = 1 do not write any scratch file on disk. Continuation and non self-consistent calculations will not be possible.
/

&parameters
!decoupled_run=.false. ! if .true. the code starts a k-indipendent calculation. When k-points are activated this option allows
                       ! to perform an indipendent self-consistent cycle for each k-point without performing the k-points average
                       ! of the electronic density. To be used before a twist average calculation in QMC.

!yes_kpoints=.false. ! set to .true. if you plan to do a calculations with k-points sampling. In this case the phase of the wavefunction
                     ! fort.10 is disregarded. 

!epsbas = 1.0d-8 ! real space cutoff for the periodic basis set (keyword PBC_C in the first record of the wave function fort.10).
                 ! NB: if DFT energy is different from what expected try to decrease the cutoff. 
/

&molecul  ! section molecular orbitals
nx=200    ! # of lattice points for the real space integratio grid in the direction x. Default ny=nz=nx
ax=0.1    ! Lattice space ax (a.u.) for Open system in the x direction; for periodic systems it is chosen as the cell parameter
          ! in the same direction and need not to be specified. Default ax=ay=az.
                
!nbufd=1000  ! Input value for the buffer dimension. Default=1000. 
             ! NB: in the complex code the buffer dimension is automatically doubled; in this case think to decrease the buffer dimension
             ! if you have memory problems.
&end

&kpoints
kp_type=0 ! This integer specify the type of k-points which will be chosen in the calculation.
          ! = 0 do not perform any k-points sampling and use the phase specified in the fort.10 as the unique k-point.
          ! = 1 use the Monkhorst-Pack algorithm to generate equally-spaced k-points in the first Brillouin zone. The size
          !     of the grid in the three carthesian directions is determined by the integer nk1,nk2,nk3. 
          !     NB: nk1 must be set to a value > 0. If nk2,nk3 are not set, then they are taken equal to nk1.
          !     NB2: if skip_equivalence (see below) is set to .false. the number of k-points might be reduced. In this case
          !          run the tool find_kpoints.x with the desired input in order to know how many processors must be allocated.
          ! = 2 k-points are set from the user and their number is specified by the integer nk1. In this case the section "KPOINTS"
          !     is needed (see below). 
          ! = 3 generates k-points path along high-symmetry lines in the first Brillouin. The initial and final points of these segments
          !     are specified in the section "KPOINTS" (see below). The number of extremal points is specified by the integer nk1
          !     and the number of points per each segment in specified by the integer nk2.  
          ! = 4 generate k-points randomly withiin the first Brillouin zone. The number of k-points is specified by nk1. No section 
          !     KPOINTS is needed.
          
nk1=2 ! its meaning depends on the value of kp_type, see above for a detailed explanation.
nk2=2 
nk3=2 
!k1=0  ! if kp_type=1 set k1,k2,k3 to 1 in order to apply an offset to the k-point grid generated by the Monkhorst-Pack algorithm.
      ! In some cases it can help to reach the convergence to the thermodynamic limit with a smaller number of k-points. 
!k2=0
!k3=0

!skip_equivalence=.false. ! if set to .true. do not reduce the number of k-points depending on the Bravais lattice symmetries.
                          ! NB: run the tool find_kpoints.f90 to know exactly how many k-points will be involved in the calculation
                          ! when this option is set to .false. (default)

! time_reversal=.false.   ! exploit time reversal symmetry to furtherly reduce the number of k-points.                      

! double_kpgrid=.false. ! Case kp_type = 1 -> if .true. the code creates two k-points grid: one for the spin up electrons and 
                        !                another one for the spin down electrons with the following relation: xkp_down(:) = -xkp_up(:)
                        ! Case kp_type = 2/3 if .true. reads, in the "KPOINTS" section below, the k-points for the spin up electrons and the
                        !                ones for the spin down electrons separated by a dummy line (see example below).

&end

! User-defined k-points. wkp(i) is the weight corresponding to the the kpoint xkp(:,i). 
! NB: if the total weight is different from on
! xkp(1,1) xkp(2,1) xkp(3,1) wkp(1)
! xkp(1,2) xkp(2,2) xkp(3,2) wkp(2)
! ......
KPOINTS
0.1667 0.1667 0.5000  0.5
0.5000 0.5000 0.5000  0.5
# blank line and after k-points for spin down electrons
-0.1667 -0.1667 -0.5000  0.5
-0.5000 -0.5000 -0.5000  0.5

&dft
!contracted_on=.false. ! If .true. it acts in the contracted basis (considerably faster). Otherwise it acts in the uncontracted basis.

!maxit=100  ! Maximum number of iterations in the self-consistent cycle.

!epsdft=1d-7  ! Tollerance in the convergence of the total energy.

!typeopt=4 ! = 0 use self consistency method with standard mixing.                     
           ! = 2 linear mixing scheme
           ! = 3 conjugate gradients method with SR acceleration.                  
           ! = 4 Anderson mixing scheme with Jacobian acceleration, no use of mixing is made; this method looks to be 
           !     the faster and therefore the preferred among the availables ones. For information on the algorithm 
           !     see doc/parbcs.tex, Ch. V
           
!mixing=1.d0 ! Linear simple mixing parameter in the density. Choose a small value for better convergence. If even in this way it 
             ! does not converge, switch on the smearing technique setting optocc=1 (suggested for open shell systems). 
             ! Alternatively you can change iteration method with typeopt=3 (conjugate gradients) which will certainly converges
             ! for mixing small enough. In these cases mixing means just the maximum amplitude in the step.
             
!mixingder=0.05 ! Used only with typeopt=3/4. 
                ! typeopt=3: used to evaluate numerically the first and second derivatives. 
                ! typeopt=4: used to be closer to the linear regime for the evaluation of the Jacobian (mixingder<<1). 
                
!tfcut=0.d0 ! Used only with typeopt=0/2/4. Use preconditioning to improve convergence of small q charge fluctuations. Value of tfcut
            ! suggested = 1/ xi_TF^2  where xi is the Thomas-Fermi length expressed in a.u.
          
!orthodiag=.false. ! By default do not orthogonalize the Kohn-Sham eigenvectors after each Hamiltonian diagonalization. 
                   ! If set to .true. the code is more accurate but slower, although sometimes it can help to improve convergence.
                   
!maxold=3  ! Maximum number of previous iterations to be considered in the numerical evaluation of Jacobian with typeopt=4. For each 
           ! iteration considered the whole charge density must be stored in memory.
           
!typedft=1 ! =  0 DFT calculation with Hartree potential only. 
           ! =  1 LDA (PZ 1981).
           ! =  2 LDA (OB 1994).
           !    NB typedft=1 and typedft=2 differ just in the interpolation of the correlation energy. 
           ! = -1,-2 as the two above, but with the corresponding fit performed by imposing continuity in the correlation energy at rs=1.
           ! =  3 KZK finite volume DFT: should be more accurate for finite volume.
           ! = -3 Different fitting procedure, suitable for open systems. Could be used with periodic systems too, but it is less stable.
           ! =  4 LSDA standard ( typedft = -4 as above typedft = -1).
           ! =  5 LSDA + KZK (not applied on spin) (typedft = -5 as typedft = -3).
            
!weightvh=1.d0   ! weight of the hartree potential. Setting weight=/1 is used just for tests.    
!weightxc=1.d0   ! weight of the exchange  energy, e.g. weightxc=0 no exchange. weightcorr=1 standard LDA.
!weightcorr=1.d0 ! weight of the correlation energy, e.g. weightcorr=0 no correlation, weightcorr=1 standard LDA.

!optocc=-1       ! =  0 use standard occupation of levels (default). It works well only for closed shell systems (insulators or special cases).
                 !    Occupations are read from standard input (see below); the number of occupations read is chosen by the parameter 
                 !    nelocc (neloccdo for down spin electrons) which must be specified in input. In this case we have that:
                 !    occupations(1:nelocc) = 2 for LDA; occupations(1:nelocc) = 1 && occupationdo(1:neloccdo) = 1 for LSDA
                 !
                 ! =  1 use a smeared Fermi distribution with a spread given by the parameter epsshell (see below). In this case:
                 !    occupations(i) = (exp( (eig(i)-ef)/epsshell)+1) where the Fermi energy ef is determined by the constraint
                 !    sum(occupations(1:bands)) = #electrons via bisection method. For LSDA (|typedft| = 4,5) two Fermi distributions 
                 !    are introduced for up and down electrons. In the case of k-points sampling, the Fermi energy is determined
                 !    by averaging overef computed for each k-point.
                 !
                 ! NB: when optocc = 1 the electron occupations are defined up to the number of levels (parameter bands 
                 !     defined below) that should be appropriately chosen.
                  
!epsshell=0.005   ! spread of the Fermi distribution used when optocc = 1. 
                                      
!memlarge=.false. ! memlarge=.true. optimize speed with much greater memory requirements. The whole basis set is saved on disk!

!epsover=1d-14  ! Minimum tollerance for the lowest eigenvalues of the overlap matrix. If epsover<0  no orthogonalization is
                ! implemented (faster but less stable).
                  
!mincond=1      ! Disregard the first mincond-1 direction regardless of the condition number limited by epsover. This is useful to 
                ! have better cancellation errors as a function e.g. of pressure.
                
!maxcg=40 ! With typeopt = 3 (conjugate gradient) each maxcg steps restart the conj. grad. procedure.
          ! If maxcg=0 no restarting is performed (discouraged since numerically unstable).
          
!bands=(#electron up)+7 ! The number of lowest eigenvalues of Khon-Sham equations to be evaluated. Default bands=nelup (the number of 
                        ! spin up electrons) + 7. This corresponds to assume at most an 8-fold degenerancy in the last occupied shell.
                        
!nelocc=0 ! if > 0 (12 in the example below) is the number of occupations that are read in the last record of this input file. 
          ! Occupations values can be only (0,2] (paired orbitals), -1 (unpaired at the end) or 0 (unoccupied). 
          ! If nxs*nys*nzs>0 this record is just after the ones to read the input magnetization (see below). 
          
!neloccdo=0 ! if > 0  (0 in the example below) as above but for the spin down electrons which are assumed with no unpaired orbitals. 
            ! Another record with neloccdo integers be written below. 
            ! NB: in this case occupations for up spin can take values 1 (occupied paired orbital), -1 (unpaired), 0 (unoccupied orbital). 
            !     Instead occupations for down spin electrons can take values 1 (occupied paired orbital) and 0 (unoccupied orbital).
            
!randspin=0.d0  ! used for initializing magnetization. If > 0, add random component to the orbitals.               if < 0 initialize with maximum possible spin given density and grid (see below). if zero no acrion.  
!jaccond=1d-12  ! minimum threshold for the condition matrix in the self-consistent approach typeopt=4.
!nxs=2  ! dimension of the grid where the magnetization is defined on the x direction: x mesh. 
        ! After "/" or "&end" read (nys+1)*(nzs-1)+nys records in the form sxyz=+/-1,0 where 1 = Sz>0,-1 = Sz<0, 0 = Sz=0
        ! s111 s211 s311 ... snxs11                                                        
        ! s121 s221 s321 ... snxs11
        ! s1nys1 ... ... ... snxsnys1
        ! # empty line
        ! s112 s212 s312 ... snxs12
        ! ...
        ! # empty line
        ! s11nzs s21nzs s31nzs ... snxs1nzs
        ! ...
        ! s1nysnzs ... ... ... snxsnysnzs 
        
!nys=2  ! y mesh
!nzs=1  ! z mesh

!h_field=0 ! if h_field >(<) 0 put a magnetic field increasing (decreasing) the magnetization with the staggering given by the
           ! table sxyz defined for randspin.
           
         
!optimize_overs=.false. ! if .true. optimize overlap matrices calculation if the phase for spin down electrons is equal or opposite
                        ! to the phase for up spin electrons. Otherwise it is automatically set to .false.
                        
!write_den=.false. ! if .true. print the total charge density on a formatted file at the end of the self-consistent calculation.

!write_matrix=.false. ! write on file the overlap matrix elements for effective Hamiltonian calculations

!zero_jas=.false. ! set the one-body Jastrow to zero at the end of the DFT calculation

!fix_density=.false. ! if the flag decoupled_run is set to .true. (&parameters card) as well as the yes_kpoints flag
                     ! (&kpoints card) the k-points are evolved independently but using the averaged electronic 
                     ! density. 

/

! This card must be added if and only if the flag compute_bands is set to .true. in the &simulation card.
&band_structure
!task=0 ! Flag to specify which quantity compute after a non self-consistent run. It is ignored if type_comp_dft=0.
        ! = 0 do not compute anything.
        ! = 1 band structure plot (use kp_type = 2/3 in the k-points card to specify the path in the Brillouin zone).
        ! = 2 Density of States calculations using smearing parameter given by epsshell. The integer optocc must be set to 1.

! emin = min(eigenvalue) ! minimum value of the energy to be included in band structure or DOS plot.
! emax = max(eigenvalue) ! maximum value of the energy to be included in band structure or DOS plot.
! deltaE = 0.01 ! energy bin for computing the density of states (task = 2).
/
 1 -1
-1  1
2 2 2 2 2 2 2 2 2 2 2 2 
